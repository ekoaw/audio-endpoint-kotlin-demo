services:
  server:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
    environment:
      LOG_FORMAT: CONSOLE_TEXT
      SPRING_DATASOURCE_URL: jdbc:postgresql://db:5432/audiodb
      SPRING_DATASOURCE_USERNAME: dbuser
      SPRING_DATASOURCE_PASSWORD: dbpass
      MINIO_ENDPOINT: http://storage:9000
      MINIO_ACCESS-KEY: storageuser
      MINIO_SECRET-KEY: storagepass
    depends_on:
      - db
      - storage

  db:
    image: postgres:17
    container_name: postgres
    restart: always
    environment:
      POSTGRES_USER: dbuser
      POSTGRES_PASSWORD: dbpass
      POSTGRES_DB: audiodb
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./migrations:/docker-entrypoint-initdb.d
    healthcheck:
      test: [ "CMD", "pg_isready", "-U", "dbuser", "-d", "audiodb", "-h", "localhost", "-p", "5432" ]
      interval: 10s
      timeout: 5s
      retries: 5

  storage:
    image: quay.io/minio/minio:latest
    container_name: storage
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: storageuser
      MINIO_ROOT_PASSWORD: storagepass
      ALIAS_NAME: minio
      BUCKET_NAME: audio-storage-bucket
    entrypoint: >
      /bin/sh -c "
        if [ ! -f .initialized ]; then
          isAlive() { curl -sf http://127.0.0.1:9000/minio/health/live; }         # check if Minio is alive
          minio $0 "$@" --quiet & echo $! > /tmp/minio.pid                        # start Minio in the background
          while ! isAlive; do sleep 0.1; done                                     # wait until Minio is alive
          mc alias set $$ALIAS_NAME http://127.0.0.1:9000 storageuser storagepass # setup Minio client
          mc mb $$ALIAS_NAME/$$BUCKET_NAME || true                                # create storage bucket
          # mc anonymous set public $$ALIAS_NAME/$$BUCKET_NAME                      # make storage bucket public
          kill -s INT $(cat /tmp/minio.pid) && rm /tmp/minio.pid                  # stop Minio
          while isAlive; do sleep 0.1; done                                       # wait until Minio is stopped
          touch .initialized
        fi
        exec minio $0 "$@"                                                        # start Minio in the foreground
      "
    command: server /data --console-address :9001
    volumes:
      - minio-data:/data:rw
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://127.0.0.1:9000/minio/health/live" ]
      interval: 10s
      start_interval: 1s
      start_period: 10s

volumes:
  minio-data: {}
  postgres-data: {}
